{
    "func_name": "flb_gzip_compress",
    "func_src_before": "int flb_gzip_compress(void *in_data, size_t in_len,\n                      void **out_data, size_t *out_len)\n{\n    int flush;\n    int status;\n    int footer_start;\n    uint8_t *pb;\n    size_t out_size;\n    void *out_buf;\n    z_stream strm;\n    mz_ulong crc;\n\n    out_size = in_len + 32;\n    out_buf = flb_malloc(out_size);\n    if (!out_buf) {\n        flb_errno();\n        flb_error(\"[gzip] could not allocate outgoing buffer\");\n        return -1;\n    }\n\n    /* Initialize streaming buffer context */\n    memset(&strm, '\\0', sizeof(strm));\n    strm.zalloc    = Z_NULL;\n    strm.zfree     = Z_NULL;\n    strm.opaque    = Z_NULL;\n    strm.next_in   = in_data;\n    strm.avail_in  = in_len;\n    strm.total_out = 0;\n\n    /* Deflate mode */\n    deflateInit2(&strm, Z_DEFAULT_COMPRESSION,\n                 Z_DEFLATED, -Z_DEFAULT_WINDOW_BITS, 9, Z_DEFAULT_STRATEGY);\n\n    /*\n     * Miniz don't support GZip format directly, instead we will:\n     *\n     * - append manual GZip magic bytes\n     * - deflate raw content\n     * - append manual CRC32 data\n     */\n    gzip_header(out_buf);\n\n    /* Header offset */\n    pb = (uint8_t *) out_buf + FLB_GZIP_HEADER_OFFSET;\n\n    flush = Z_NO_FLUSH;\n    while (1) {\n        strm.next_out  = pb + strm.total_out;\n        strm.avail_out = out_size - (pb - (uint8_t *) out_buf);\n\n        if (strm.avail_in == 0) {\n            flush = Z_FINISH;\n        }\n\n        status = deflate(&strm, flush);\n        if (status == Z_STREAM_END) {\n            break;\n        }\n        else if (status != Z_OK) {\n            deflateEnd(&strm);\n            return -1;\n        }\n    }\n\n    if (deflateEnd(&strm) != Z_OK) {\n        flb_free(out_buf);\n        return -1;\n    }\n    *out_len = strm.total_out;\n\n    /* Construct the gzip checksum (CRC32 footer) */\n    footer_start = FLB_GZIP_HEADER_OFFSET + *out_len;\n    pb = (uint8_t *) out_buf + footer_start;\n\n    crc = mz_crc32(MZ_CRC32_INIT, in_data, in_len);\n    *pb++ = crc & 0xFF;\n    *pb++ = (crc >> 8) & 0xFF;\n    *pb++ = (crc >> 16) & 0xFF;\n    *pb++ = (crc >> 24) & 0xFF;\n    *pb++ = in_len & 0xFF;\n    *pb++ = (in_len >> 8) & 0xFF;\n    *pb++ = (in_len >> 16) & 0xFF;\n    *pb++ = (in_len >> 24) & 0xFF;\n\n    /* Set the real buffer size for the caller */\n    *out_len += FLB_GZIP_HEADER_OFFSET + 8;\n    *out_data = out_buf;\n\n    return 0;\n}",
    "func_src_after": "int flb_gzip_compress(void *in_data, size_t in_len,\n                      void **out_data, size_t *out_len)\n{\n    int flush;\n    int status;\n    int footer_start;\n    uint8_t *pb;\n    size_t out_size;\n    void *out_buf;\n    z_stream strm;\n    mz_ulong crc;\n\n\n    /*\n     * GZIP relies on an algorithm with worst-case expansion\n     * of 5 bytes per 32KB data. This means we need to create a variable\n     * length output, that depends on the input length.\n     * See RFC 1951 for details.\n     */\n    int max_input_expansion = ((int)(in_len / 32000) + 1) * 5;\n\n    /*\n     * Max compressed size is equal to sum of:\n     *   10 byte header\n     *   8 byte foot\n     *   max input expansion\n     *   size of input\n     */\n    out_size = 10 + 8 + max_input_expansion + in_len;\n    out_buf = flb_malloc(out_size);\n\n    if (!out_buf) {\n        flb_errno();\n        flb_error(\"[gzip] could not allocate outgoing buffer\");\n        return -1;\n    }\n\n    /* Initialize streaming buffer context */\n    memset(&strm, '\\0', sizeof(strm));\n    strm.zalloc    = Z_NULL;\n    strm.zfree     = Z_NULL;\n    strm.opaque    = Z_NULL;\n    strm.next_in   = in_data;\n    strm.avail_in  = in_len;\n    strm.total_out = 0;\n\n    /* Deflate mode */\n    deflateInit2(&strm, Z_DEFAULT_COMPRESSION,\n                 Z_DEFLATED, -Z_DEFAULT_WINDOW_BITS, 9, Z_DEFAULT_STRATEGY);\n\n    /*\n     * Miniz don't support GZip format directly, instead we will:\n     *\n     * - append manual GZip magic bytes\n     * - deflate raw content\n     * - append manual CRC32 data\n     */\n    gzip_header(out_buf);\n\n    /* Header offset */\n    pb = (uint8_t *) out_buf + FLB_GZIP_HEADER_OFFSET;\n\n    flush = Z_NO_FLUSH;\n    while (1) {\n        strm.next_out  = pb + strm.total_out;\n        strm.avail_out = out_size - (pb - (uint8_t *) out_buf);\n\n        if (strm.avail_in == 0) {\n            flush = Z_FINISH;\n        }\n\n        status = deflate(&strm, flush);\n        if (status == Z_STREAM_END) {\n            break;\n        }\n        else if (status != Z_OK) {\n            deflateEnd(&strm);\n            return -1;\n        }\n    }\n\n    if (deflateEnd(&strm) != Z_OK) {\n        flb_free(out_buf);\n        return -1;\n    }\n    *out_len = strm.total_out;\n\n    /* Construct the gzip checksum (CRC32 footer) */\n    footer_start = FLB_GZIP_HEADER_OFFSET + *out_len;\n    pb = (uint8_t *) out_buf + footer_start;\n\n    crc = mz_crc32(MZ_CRC32_INIT, in_data, in_len);\n    *pb++ = crc & 0xFF;\n    *pb++ = (crc >> 8) & 0xFF;\n    *pb++ = (crc >> 16) & 0xFF;\n    *pb++ = (crc >> 24) & 0xFF;\n    *pb++ = in_len & 0xFF;\n    *pb++ = (in_len >> 8) & 0xFF;\n    *pb++ = (in_len >> 16) & 0xFF;\n    *pb++ = (in_len >> 24) & 0xFF;\n\n    /* Set the real buffer size for the caller */\n    *out_len += FLB_GZIP_HEADER_OFFSET + 8;\n    *out_data = out_buf;\n\n    return 0;\n}",
    "line_changes": {
        "deleted": [
            {
                "line_no": 13,
                "char_start": 258,
                "char_end": 286,
                "line": "    out_size = in_len + 32;\n"
            }
        ],
        "added": [
            {
                "line_no": 13,
                "char_start": 258,
                "char_end": 259,
                "line": "\n"
            },
            {
                "line_no": 14,
                "char_start": 259,
                "char_end": 266,
                "line": "    /*\n"
            },
            {
                "line_no": 15,
                "char_start": 266,
                "char_end": 327,
                "line": "     * GZIP relies on an algorithm with worst-case expansion\n"
            },
            {
                "line_no": 16,
                "char_start": 327,
                "char_end": 400,
                "line": "     * of 5 bytes per 32KB data. This means we need to create a variable\n"
            },
            {
                "line_no": 17,
                "char_start": 400,
                "char_end": 456,
                "line": "     * length output, that depends on the input length.\n"
            },
            {
                "line_no": 18,
                "char_start": 456,
                "char_end": 489,
                "line": "     * See RFC 1951 for details.\n"
            },
            {
                "line_no": 19,
                "char_start": 489,
                "char_end": 497,
                "line": "     */\n"
            },
            {
                "line_no": 20,
                "char_start": 497,
                "char_end": 560,
                "line": "    int max_input_expansion = ((int)(in_len / 32000) + 1) * 5;\n"
            },
            {
                "line_no": 21,
                "char_start": 560,
                "char_end": 561,
                "line": "\n"
            },
            {
                "line_no": 22,
                "char_start": 561,
                "char_end": 568,
                "line": "    /*\n"
            },
            {
                "line_no": 23,
                "char_start": 568,
                "char_end": 615,
                "line": "     * Max compressed size is equal to sum of:\n"
            },
            {
                "line_no": 24,
                "char_start": 615,
                "char_end": 639,
                "line": "     *   10 byte header\n"
            },
            {
                "line_no": 25,
                "char_start": 639,
                "char_end": 660,
                "line": "     *   8 byte foot\n"
            },
            {
                "line_no": 26,
                "char_start": 660,
                "char_end": 689,
                "line": "     *   max input expansion\n"
            },
            {
                "line_no": 27,
                "char_start": 689,
                "char_end": 712,
                "line": "     *   size of input\n"
            },
            {
                "line_no": 28,
                "char_start": 712,
                "char_end": 720,
                "line": "     */\n"
            },
            {
                "line_no": 29,
                "char_start": 720,
                "char_end": 774,
                "line": "    out_size = 10 + 8 + max_input_expansion + in_len;\n"
            },
            {
                "line_no": 31,
                "char_start": 810,
                "char_end": 811,
                "line": "\n"
            }
        ]
    },
    "char_changes": {
        "deleted": [
            {
                "char_start": 276,
                "char_end": 277,
                "chars": "l"
            },
            {
                "char_start": 282,
                "char_end": 284,
                "chars": "32"
            }
        ],
        "added": [
            {
                "char_start": 258,
                "char_end": 259,
                "chars": "\n"
            },
            {
                "char_start": 263,
                "char_end": 324,
                "chars": "/*\n     * GZIP relies on an algorithm with worst-case expansi"
            },
            {
                "char_start": 325,
                "char_end": 418,
                "chars": "n\n     * of 5 bytes per 32KB data. This means we need to create a variable\n     * length outp"
            },
            {
                "char_start": 420,
                "char_end": 433,
                "chars": ", that depend"
            },
            {
                "char_start": 434,
                "char_end": 442,
                "chars": " on the "
            },
            {
                "char_start": 443,
                "char_end": 465,
                "chars": "nput length.\n     * Se"
            },
            {
                "char_start": 467,
                "char_end": 525,
                "chars": "RFC 1951 for details.\n     */\n    int max_input_expansion "
            },
            {
                "char_start": 527,
                "char_end": 534,
                "chars": "((int)("
            },
            {
                "char_start": 541,
                "char_end": 542,
                "chars": "/"
            },
            {
                "char_start": 545,
                "char_end": 772,
                "chars": "000) + 1) * 5;\n\n    /*\n     * Max compressed size is equal to sum of:\n     *   10 byte header\n     *   8 byte foot\n     *   max input expansion\n     *   size of input\n     */\n    out_size = 10 + 8 + max_input_expansion + in_len"
            },
            {
                "char_start": 809,
                "char_end": 810,
                "chars": "\n"
            }
        ]
    },
    "commit_link": "github.com/fluent/fluent-bit/commit/cadff53c093210404aed01c4cf586adb8caa07af",
    "file_name": "src/flb_gzip.c",
    "vul_type": "cwe-787"
}